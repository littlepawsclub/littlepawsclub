TASK: Implement Rock-Solid Cart Functionality (Phase 2B)
Site name: Small Paws Club

0 ‚Ä¢ NEVER BREAK THESE
Do NOT delete or rename any existing files, CSS classes, or data files.

Do NOT overwrite images or JSON ‚Äì append / edit carefully.

Code must work for both desktop and ‚â§ 375 px mobile without horizontal scroll.

All new JS goes in js/cart.js (create if missing).

All new SCSS goes in scss/components/_cart.scss then import it in scss/main.scss.

Use vanilla JS only (no frameworks).

Run sass main.scss ../css/main.css --style compressed after SCSS edits.

When done, show a short, bullet proof-of-work log (add ‚Üí cart, see count, open cart.html, totals correct).

1 ‚Ä¢ DATA MODEL (localStorage key ="spcCart")
js
Copy
Edit
// example structure stored as JSON string
{
  "abc123": {          // product.id
    id: "abc123",
    name: "Collapsible Small-Pet Tunnel",
    price: 17.99,
    qty: 2,
    image: "img/tunnel.jpg"
  },
  ...
}
2 ‚Ä¢ ADD-TO-CART BUTTONS
File(s):

js/shop.js AND js/product.js (if you created one)

For every ‚Äú.add-to-cart‚Äù button:

Read data-id, data-name, data-price, data-img.

If the product already exists in spcCart, increment qty; else create it with qty=1.

Persist cart object back to localStorage.

Call updateCartBadge() (see ¬ß3).

3 ‚Ä¢ CART COUNT BADGE (header)
File(s): js/cart.js

Provide updateCartBadge() that:

Calculates totalQty = Œ£ qty in spcCart.

Injects totalQty into <span id="cart-count"> (already in header).

Hides the span if totalQty === 0.

Call this function on page load of every page and after any cart change.

4 ‚Ä¢ cart.html PAGE
Create cart.html (copy header/footer layout from shop.html).

Add an empty <div id="cart-items"></div> and <div id="cart-summary"></div> .

5 ‚Ä¢ CART PAGE LOGIC (js/cart.js)
On DOMContentLoaded ONLY on cart.html:

js
Copy
Edit
buildCartPage();   // your function
buildCartPage() must:

Parse spcCart from storage; if empty show ‚ÄúYour cart is empty‚Äù.

For each item create markup:

Thumbnail, name (link back to product), unit price

Quantity input (type number min = 1)

Line total = qty √ó price

Remove (üóë) button

Attach change listeners to qty inputs:

Update qty in storage, re-compute line total & summary totals, call updateCartBadge().

Attach listener to remove buttons:

Delete key, rebuild cart display, call updateCartBadge().

Summary section shows Subtotal ¬£xx.xx (2 decimals).

Disable checkout button if cart empty (placeholder only).

6 ‚Ä¢ SCSS
_cart.scss ‚Äî basic table / card styling, flex column on mobile, row on ‚â• 640 px.

Add:

scss
Copy
Edit
@import 'components/cart';
at the bottom of main.scss.

Re-compile CSS (rule 7).

7 ‚Ä¢ ACCESSIBILITY & UX NITS
Quantity buttons / inputs must be keyboard accessible.

Use visually-hidden text for screen-reader labels on icons.

Ensure color contrast ‚â• WCAG AA (use existing palette variables).

8 ‚Ä¢ DONE CHECK
Before you claim success, manually test in the browser (devtools mobile + desktop):

Visit /shop.html, click ‚ÄúAdd to Cart‚Äù on two different products.

Verify header badge shows correct total.

Open /cart.html via header icon.

Confirm items render with correct totals.

Change qty, remove item ‚Äì badge & subtotal update instantly (no refresh).

Reload page ‚Äî cart persists.

Provide in chat a concise bullet list proving each step worked.

9 ‚Ä¢ FUTURE PLACEHOLDER (no work now)
Insert an empty <section id="checkout-options"></section> below summary for later Stripe/PayPal code.

If anything fails the DONE CHECK, fix it before replying.
Only then send the success log.